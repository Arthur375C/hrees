class Hrees {
  constructor(gravity = 0.98) {
    this.gravity = gravity;
    this.objects = [];
    this.particles = [];
    this.triggers = [];
    this.texts = [];
    this.sounds = {};
  }

  // ================= OBJETOS =================
  addObject(obj) {
    obj.vx = obj.vx || 0;
    obj.vy = obj.vy || 0;
    obj.ax = 0;
    obj.ay = 0;
    obj.rotation = obj.rotation || 0;
    obj.angularVelocity = obj.angularVelocity || 0;
    obj.friction = obj.friction || 0.99;
    obj.elasticity = obj.elasticity || 0.7;
    obj.mass = obj.mass || 1;
    obj.type = obj.type || 'rect'; // 'rect', 'circle', 'image'
    obj.width = obj.width || 50;
    obj.height = obj.height || 50;
    obj.radius = obj.radius || 25;
    obj.canvasWidth = obj.canvasWidth || 600;
    obj.canvasHeight = obj.canvasHeight || 400;
    obj.color = obj.color || 'red';
    this.objects.push(obj);
  }

  addRect(x, y, w, h, options={}) {
    this.addObject({x, y, width: w, height: h, type:'rect', ...options});
  }

  addCircle(x, y, r, options={}) {
    this.addObject({x, y, radius:r, type:'circle', ...options});
  }

  addImage(path, options={}) {
    const img = new Image();
    img.src = path;
    img.onload = () => {
      this.addObject({type:'image', image:img, ...options});
    };
  }

  addText(text, options={}) {
    this.texts.push({...options, text});
  }

  addParticle(p) {
    p.vx = p.vx || 0;
    p.vy = p.vy || 0;
    p.life = p.life || 100;
    p.size = p.size || 5;
    p.color = p.color || 'yellow';
    this.particles.push(p);
  }

  addTrigger(x, y, w, h, callback) {
    this.triggers.push({x, y, w, h, callback});
  }

  loadSound(name, path) {
    const audio = new Audio(path);
    this.sounds[name] = audio;
  }

  playSound(name) {
    if(this.sounds[name]) this.sounds[name].play();
  }

  applyForces(obj, fx, fy) {
    obj.vx += fx / (obj.mass || 1);
    obj.vy += fy / (obj.mass || 1);
  }

  // ================= FÍSICA =================
  applyGravity() {
    for(let obj of this.objects) obj.vy += this.gravity;
  }

  handleCollisions() {
    for(let obj of this.objects){
      // chão e paredes
      if(obj.type==='rect'){
        if(obj.y+obj.height>obj.canvasHeight){ obj.y=obj.canvasHeight-obj.height; obj.vy*=-obj.elasticity; }
        if(obj.y<0){ obj.y=0; obj.vy*=-obj.elasticity; }
        if(obj.x<0){ obj.x=0; obj.vx*=-obj.elasticity; }
        if(obj.x+obj.width>obj.canvasWidth){ obj.x=obj.canvasWidth-obj.width; obj.vx*=-obj.elasticity; }
      } else if(obj.type==='circle'){
        if(obj.y+obj.radius>obj.canvasHeight){ obj.y=obj.canvasHeight-obj.radius; obj.vy*=-obj.elasticity; }
        if(obj.y-obj.radius<0){ obj.y=obj.radius; obj.vy*=-obj.elasticity; }
        if(obj.x-obj.radius<0){ obj.x=obj.radius; obj.vx*=-obj.elasticity; }
        if(obj.x+obj.radius>obj.canvasWidth){ obj.x=obj.canvasWidth-obj.radius; obj.vx*=-obj.elasticity; }
      }
    }

    // colisões retângulo ↔ retângulo
    for(let i=0;i<this.objects.length;i++){
      for(let j=i+1;j<this.objects.length;j++){
        const a=this.objects[i], b=this.objects[j];
        if(a.type==='rect' && b.type==='rect'){
          if(a.x<b.x+b.width && a.x+a.width>b.x && a.y<b.y+b.height && a.y+a.height>b.y){
            [a.vx,b.vx]=[b.vx*a.elasticity,a.vx*b.elasticity];
            [a.vy,b.vy]=[b.vy*a.elasticity,a.vy*b.elasticity];
          }
        }
      }
    }
  }

  updateParticles() {
    for(let i=this.particles.length-1;i>=0;i--){
      const p=this.particles[i];
      p.vy+=this.gravity*0.1;
      p.x+=p.vx;
      p.y+=p.vy;
      p.life--;
      if(p.life<=0) this.particles.splice(i,1);
    }
  }

  checkTriggers() {
    for(let trig of this.triggers){
      for(let obj of this.objects){
        if(obj.x<trig.x+trig.w && obj.x+obj.width>trig.x &&
           obj.y<trig.y+trig.h && obj.y+obj.height>trig.y){
          trig.callback(obj);
        }
      }
    }
  }

  update() {
    this.applyGravity();
    for(let obj of this.objects){
      obj.vx*=obj.friction;
      obj.vy*=obj.friction;
      obj.x+=obj.vx;
      obj.y+=obj.vy;
      obj.rotation+=obj.angularVelocity;
    }
    this.handleCollisions();
    this.updateParticles();
    this.checkTriggers();
  }

  render(ctx) {
    for(let obj of this.objects){
      ctx.save();
      ctx.translate(obj.x+(obj.type==='rect'?obj.width/2:0), obj.y+(obj.type==='rect'?obj.height/2:0));
      ctx.rotate(obj.rotation);
      if(obj.type==='rect'){
        ctx.fillStyle=obj.color;
        ctx.fillRect(-obj.width/2,-obj.height/2,obj.width,obj.height);
      } else if(obj.type==='circle'){
        ctx.fillStyle=obj.color;
        ctx.beginPath();
        ctx.arc(0,0,obj.radius,0,Math.PI*2);
        ctx.fill();
      } else if(obj.type==='image' && obj.image && obj.image.complete && obj.image.naturalWidth>0){
        ctx.drawImage(obj.image,-obj.width/2,-obj.height/2,obj.width,obj.height);
      }
      ctx.restore();
    }

    for(let p of this.particles){
      ctx.fillStyle=p.color;
      ctx.fillRect(p.x,p.y,p.size,p.size);
    }

    for(let t of this.texts){
      ctx.fillStyle=t.color||'white';
      ctx.font=t.font||'20px Arial';
      ctx.fillText(t.text,t.x||0,t.y||0);
    }
  }
}

